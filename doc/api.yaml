openapi: 3.0.3
info:
  title: WASAPhoto
  description: |
    Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto!  
    You can upload your photos directly from your PC, and they will be visible to everyone following you
  version: 0.1.0
servers: 
  - url: http://localhost:3000

tags:
  - name: "MyProfile"
    description: "All about your Profile"
  - name: "ManageProfile"
    description: "Interact with Profiles"
  - name: "ManagePost"
    description: "All about your Post"

paths:
  /session:
    post:
      tags: ["MyProfile"]
      summary: Log in the user
      description: |-
        If the username does not exist, it will create a new profile, and an IDentifier is returned.
        If the username exists, the profile IDentifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json: 
            schema: {$ref: "#/components/schemas/Username"}
        required: true
      responses:
        '200':
          description: Log-in successfully
          content:
            application/json: 
              schema: {$ref: "#/components/schemas/Profile/properties/ID"}

        '201':
          description: Profile created
          content:
            application/json: 
              schema: {$ref: "#/components/schemas/Profile/properties/ID"}


  /users/{UID}/stream:
    parameters:
      - $ref: "#/components/parameters/UserID"  
    get:
      security:
        - bearerAuth: []  
      tags: ["MyProfile"]
      operationId: getMyStream
      summary: Get user's stream
      description: |
        The stream is composed by photos from “following” (other users that the user follows).
      responses:
        '200':
          description: User stream successfully found
          content:
            application/json:
              schema: {$ref: "#/components/schemas/Stream"}
        '400': {$ref: "#/components/responses/400BadRequest"}
        '401': {$ref: "#/components/responses/401UnauthorizedError"}
        '404': {$ref: "#/components/responses/404NotFound"}
        '500': {$ref: "#/components/responses/500InternalServerError"}

  /users/{UID}/profile:
    parameters:
        - $ref: "#/components/parameters/UserID"   
    get:
      security:
        - bearerAuth: []   
      tags: ["MyProfile"]  
      operationId:  getUserProfile
      summary: Search by username
      description: Get the profile of the user with the given one username in the request.
      responses:
        '200':
          description: User profile successfully found
          content:
            application/json:
              schema: {$ref: "#/components/schemas/Profile"}
        '400': {$ref: "#/components/responses/400BadRequest"}
        '401': {$ref: "#/components/responses/401UnauthorizedError"}
        '404': {$ref: "#/components/responses/404NotFound"}
        '500': {$ref: "#/components/responses/500InternalServerError"}

    put:
      security:
        - bearerAuth: []
      tags: ["MyProfile"]
      operationId: setMyUserName
      summary: Change username
      description: Set a new username for the current user.
      requestBody:
        description: User details
        content:
          application/json: 
            schema: {$ref: "#/components/schemas/Username"}
        required: true
      responses:
        '200':
          description: Username successfully changed
          content:
            application/json: 
              schema: {$ref: "#/components/schemas/Username"}
        '400': {$ref: "#/components/responses/400BadRequest"}
        '401': {$ref: "#/components/responses/401UnauthorizedError"}
        '500': {$ref: "#/components/responses/500InternalServerError"}
  
  /users/{UID}/followers/{followerUID}:
    parameters:
        - $ref: "#/components/parameters/UserID" 
        - $ref: "#/components/parameters/FollowerUID" 
    put:
      security:
        - bearerAuth: []
      tags: ["ManageProfile"]
      operationId: followUser
      summary: Follow an user
      description: Follow an user if it's not followed yet.
      responses:
        '200':
          description: User successfully followed
          content:
            application/json: 
              schema: {$ref: "#/components/schemas/Profile/properties/ID"}
        '400': {$ref: "#/components/responses/400BadRequest"}
        '401': {$ref: "#/components/responses/401UnauthorizedError"}
        '404': {$ref: "#/components/responses/404NotFound"}
        '500': {$ref: "#/components/responses/500InternalServerError"}
    delete:
      security:
        - bearerAuth: []
      tags: ["ManageProfile"]
      operationId: unfollowUser
      summary: Unfollow an user
      description: Unfollow an user if it's already followed.
      responses:
        '204':
          description: User successfully unfollowed
        '400': {$ref: "#/components/responses/400BadRequest"}
        '401': {$ref: "#/components/responses/401UnauthorizedError"}
        '404': {$ref: "#/components/responses/404NotFound"}
        '500': {$ref: "#/components/responses/500InternalServerError"}

  /users/{UID}/banned/{banUID}:
    parameters:
        - $ref: "#/components/parameters/UserID" 
        - $ref: "#/components/parameters/BanUID" 
    put:
      security:
        - bearerAuth: []
      tags: ["ManageProfile"]
      operationId: banUser
      summary: Ban an user
      description: Ban an user if it's not banned yet.
      responses:
        '200':
          description: User successfully banned
          content:
            application/json: 
              schema: {$ref: "#/components/schemas/Profile/properties/ID"}
        '400': {$ref: "#/components/responses/400BadRequest"}
        '401': {$ref: "#/components/responses/401UnauthorizedError"}
        '404': {$ref: "#/components/responses/404NotFound"}
        '500': {$ref: "#/components/responses/500InternalServerError"}
    delete:
      security:
        - bearerAuth: []
      tags: ["ManageProfile"]
      operationId: unbanUser
      summary: Unban an user
      description: Unban an user if it's already banned.
      responses:
        '204':
          description: User successfully unbanned
        '400': {$ref: "#/components/responses/400BadRequest"}
        '401': {$ref: "#/components/responses/401UnauthorizedError"}
        '404': {$ref: "#/components/responses/404NotFound"}
        '500': {$ref: "#/components/responses/500InternalServerError"}

  /posts:
    post:
      security:
        - bearerAuth: []
      tags: ["ManageProfile"]
      operationId: uploadPhoto
      summary: Upload a photo
      description: Upload a photo on the profile.
      requestBody:
        description: Photo details
        content:
          multipart/form-data: 
            schema:
              description: Request for photo image and photo description.
              type: object
              properties:
                Photo: {$ref: "#/components/schemas/Post/properties/Photo"}
                Description: {$ref: "#/components/schemas/Post/properties/Description"}
        required: true
      responses:
        '201':
          description: Photo successfully uploaded
          content:
            application/json: 
              schema: {$ref: "#/components/schemas/Post/properties/ID"}
        '400': {$ref: "#/components/responses/400BadRequest"}
        '401': {$ref: "#/components/responses/401UnauthorizedError"}
        '404': {$ref: "#/components/responses/404NotFound"}
        '500': {$ref: "#/components/responses/500InternalServerError"}
  
  /posts/{postID}:
    parameters:
        - $ref: "#/components/parameters/PostID" 
    delete:
      security:
        - bearerAuth: []
      tags: ["ManageProfile"]
      operationId: deletePhoto
      summary: Delete a photo
      description: |
        Delete a photo from the profile.

        Removal of an image will also remove likes and comments.
      responses:
        '204':
          description: Photo successfully deleted
        '400': {$ref: "#/components/responses/400BadRequest"}
        '401': {$ref: "#/components/responses/401UnauthorizedError"}
        '404': {$ref: "#/components/responses/404NotFound"}
        '500': {$ref: "#/components/responses/500InternalServerError"}
    
  /posts/{postID}/likes/{UID}:
    parameters:
        - $ref: "#/components/parameters/UserID" 
        - $ref: "#/components/parameters/PostID" 
    put:
      security:
        - bearerAuth: []
      tags: ["ManagePost"]
      operationId: likePhoto
      summary: Like a Photo
      description: Like a post if it's not liked yet.
      responses:
        '201':
          description: Photo successfully liked
          content:
            application/json: 
              schema: {$ref: "#/components/schemas/Like/properties/ID"}
        '400': {$ref: "#/components/responses/400BadRequest"}
        '401': {$ref: "#/components/responses/401UnauthorizedError"}
        '404': {$ref: "#/components/responses/404NotFound"}
        '500': {$ref: "#/components/responses/500InternalServerError"}
    
    delete:
      security:
        - bearerAuth: []
      tags: ["ManagePost"]
      operationId: unlikePhoto
      summary: Unlike a Photo
      description: Remove like from a photo if it's already liked.
      responses:
        '204':
          description: Photo successfully unliked
        '400': {$ref: "#/components/responses/400BadRequest"}
        '401': {$ref: "#/components/responses/401UnauthorizedError"}
        '404': {$ref: "#/components/responses/404NotFound"}
        '500': {$ref: "#/components/responses/500InternalServerError"}
  
  /posts/{postID}/comments:
    parameters: 
        - $ref: "#/components/parameters/PostID" 
    post:
      security:
        - bearerAuth: []
      tags: ["ManagePost"]
      operationId: commentPhoto
      summary: Comment a photo
      description: Public a comment about a post.
      requestBody:
        description: Comment details
        content:
          application/json: 
            schema: {$ref: '#/components/schemas/Text'}
        required: true
      responses:
        '201':
          description: Comment successfully created
          content:
            application/json: 
              schema: {$ref: "#/components/schemas/Comment/properties/ID"}
        '400': {$ref: "#/components/responses/400BadRequest"}
        '401': {$ref: "#/components/responses/401UnauthorizedError"}
        '404': {$ref: "#/components/responses/404NotFound"}
        '500': {$ref: "#/components/responses/500InternalServerError"}
    
  /posts/{postID}/comments/{UID}:
    parameters:
        - $ref: "#/components/parameters/UserID" 
        - $ref: "#/components/parameters/PostID" 
    delete:
      security:
        - bearerAuth: []
      tags: ["ManagePost"]
      operationId: uncommentPhoto
      summary: Delete a comment
      description: |
        Delete a comment from a post. 
      
        Only authors can remove their comments.
      responses:
        '204':
          description: Photo successfully uncommented
        '400': {$ref: "#/components/responses/400BadRequest"}
        '401': {$ref: "#/components/responses/401UnauthorizedError"}
        '404': {$ref: "#/components/responses/404NotFound"}
        '500': {$ref: "#/components/responses/500InternalServerError"}
    


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 
  
  responses:
    400BadRequest: 
      description: The request was not compliant with the documnetation (eg. missing field, etc).
    401UnauthorizedError: 
      description: Unauthorised, the user does not have valid authentication credentials for the target resource.
    404NotFound:
      description: The requested resource could not be found but may be available in the future.
    500InternalServerError:
      description: Server sIDe error.
    
  parameters:
    UserID:
      name: UID
      description: User identifier
      schema: {$ref: "#/components/schemas/Profile/properties/ID"}
      in: path
      required: true
    PostID:
      name: postID
      description: Post identifier
      schema: {$ref: "#/components/schemas/Post/properties/ID"}
      in: path
      required: true
    BanUID:
      name: banUID
      description: Banned user identifier
      schema: {$ref: "#/components/schemas/Profile/properties/ID"}
      in: path
      required: true
    FollowerUID:
      name: followerUID
      description: Follower user identifier
      schema: {$ref: "#/components/schemas/Profile/properties/ID"}
      in: path
      required: true
    

  schemas:
          
    Stream:
      description: User stream schema
      type: object
      properties:
        ID: {$ref: "#/components/schemas/ID"}
        Posts: {$ref: "#/components/schemas/ListOfPosts"}

    Profile:
      description: |
        A profile contains an user's photos (in reverse chronological order),
        how many photos have been uploaded, and the user's followers and
        following.
      type: object
      properties:
        ID: {$ref: "#/components/schemas/ID"}
        ProfileBio: {$ref: "#/components/schemas/ProfileBio"}
        ProfilePicture:
          description: File of the profile picture
          type: string
          format: binary
        Followers:
          description: List of followers' profiles with relative number of them
          type: object
          properties:
            Count: {$ref: "#/components/schemas/Count"}
            List: {$ref: "#/components/schemas/ListOfProfiles"}
        Following:
          description: List of following's profiles with relative number of them
          type: object
          properties:
            Count: {$ref: "#/components/schemas/Count"}
            List: {$ref: "#/components/schemas/ListOfProfiles"}
        Banned:
          description: List of banned profiles with relative number of them
          type: object
          properties:
            List: {$ref: "#/components/schemas/ListOfProfiles"}
        Posts:
          description: List of user's photos with relative number of its
          type: object
          properties:
            Count: {$ref: "#/components/schemas/Count"}
            List: {$ref: "#/components/schemas/ListOfProfiles"}
    
    Post:
      description: An uploaded photo with its description, date, likes and comments
      type: object
      properties:
        ID: {$ref: "#/components/schemas/ID"}
        Photo: {$ref: "#/components/schemas/Photo"}
        Description:
          description: Description about the post
          type: string
          pattern: '^.*?$'
          minLength: 0
          maxLength: 150
          example: This is a description
        Likes:
          description: List of users who liked the post with relative number of them
          type: object
          properties:
            Count: {$ref: "#/components/schemas/Count"}
            List: {$ref: "#/components/schemas/ListOfLikes"}
        Comments:
          description: List of comments about the post
          type: object
          properties:
            Count: {$ref: "#/components/schemas/Count"}
            List: {$ref: "#/components/schemas/ListOfComments"}
        DateTime: {$ref: "#/components/schemas/DateTime"}
    
    Photo:
      description: File of the photo posted
      type: object
      properties:
        ID: {$ref: "#/components/schemas/ID"}
        File:
          type: string
          format: binary
    
    Comment:
      description: A generic comment
      type: object 
      properties:
        ID: {$ref: "#/components/schemas/ID"}
        Post: {$ref: "#/components/schemas/Post"}
        OwnerUID: {$ref: "#/components/schemas/Profile/properties/ID"}
        CommentUID: {$ref: "#/components/schemas/Profile/properties/ID"}
        Text: {$ref: "#/components/schemas/Text"}
        DateTime: {$ref: "#/components/schemas/DateTime"}
            
    Like:
      description: A generic like
      type: object
      properties:
        ID: {$ref: "#/components/schemas/ID"}
        Post: {$ref: "#/components/schemas/Post"}
        OwnerUID: {$ref: "#/components/schemas/Profile/properties/ID"}
        LikeUID: {$ref: "#/components/schemas/Profile/properties/ID"}
          
    ID:
      description: ID
      type: integer
      minimum: 1
      example: 1993737
      readOnly: true

    Username:
      description: Username schema
      type: object 
      properties:
        name:
          type: string
          example: Eve
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
        
    Text:
      description: Text schema
      type: string
      pattern: '^.*?$'
      minLength: 0
      maxLength: 100
      example: This is a text
    
    ProfileBio:
      description: Profile's biografy
      type: string
      pattern: '^.*?$'
      minLength: 0
      maxLength: 150
      example: This is a biografy
    
    Count:
      description: Counter schema
      type: integer
      minimum: 0
      example: 24
    
    DateTime:
      description: Date and time schema
      type: string
      format: date-time 
      example: 2023-11-06T14:38:28Z
      
    ListOfProfiles:
      description: List of users
      type: array
      items: {$ref: "#/components/schemas/Profile/properties/ID"}
      minItems: 0
      maxItems: 9999
      uniqueItems: true
    
    ListOfPosts:
      description: List of posts
      type: array
      items: {$ref: "#/components/schemas/Post/properties/ID"}
      minItems: 0
      maxItems: 9999
      uniqueItems: true
    
    ListOfLikes:
      description: List of likes
      type: array
      items: {$ref: "#/components/schemas/Like/properties/ID"}
      minItems: 0
      maxItems: 9999
      uniqueItems: true
      
    ListOfComments:
      description: List of comments
      type: array
      items: {$ref: "#/components/schemas/Comment/properties/ID"}
      minItems: 0
      maxItems: 9999
      uniqueItems: true
